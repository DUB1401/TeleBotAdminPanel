from ..UI.ReplyKeyboards import MailingReplyKeyboards
from .Structs.OptionsStruct import OptionsStruct

from dublib.TelebotUtils import UserData, UsersManager
from dublib.TelebotUtils.Master import Decorators

from threading import Thread
from time import sleep
import random

from telebot import TeleBot, types

class Mailer:
	"""–†–∞—Å—Å—ã–ª—å—â–∏–∫."""

	#==========================================================================================#
	# >>>>> –ü–†–ò–í–ê–¢–ù–´–ï –®–ê–ë–õ–û–ù–´ <<<<< #
	#==========================================================================================#

	@Decorators.ignore_frecuency_errors
	def __EndReport(self, admin: UserData):
		"""
		–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ç—á—ë—Ç.

		:param admin: –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
		:type admin: UserData
		"""

		self.__Bot.send_message(
			chat_id = admin.id,
			text = "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
			reply_markup = MailingReplyKeyboards.mailing(admin)
		)

	@Decorators.ignore_frecuency_errors
	def __UpdateReport(self, admin: UserData, message_id: int, progress: float, index: int, targets_count: int, sended: int, errors_count: int):
		"""
		–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ.

		:param admin: –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
		:type admin: UserData
		:param message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è.
		:type message_id: int
		:param progress: –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
		:type progress: float
		:param index: –ò–Ω–¥–µ–∫—Å –æ–ø–µ—Ä–∞—Ü–∏–∏.
		:type index: int
		:param targets_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π.
		:type targets_count: int
		:param sended: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
		:type sended: int
		:param errors_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫.
		:type errors_count: int
		"""

		self.__Bot.edit_message_text(
			chat_id = admin.id,
			message_id = message_id,
			text = f"<b>üì® –†–∞—Å—Å—ã–ª–∫–∞</b>\n\n‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}% ({index + 1} –∏–∑ {targets_count})\n‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sended}\n‚ùå –û—à–∏–±–æ–∫: {errors_count}",
			parse_mode = "HTML"
		)

	#==========================================================================================#
	# >>>>> –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#

	def __BuildButton(self, text: str, link: str) -> types.InlineKeyboardButton:
		"""
		–°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É.
			text ‚Äì –ø–æ–¥–ø–∏—Å—å –∫–Ω–æ–ø–∫–∏;
			link ‚Äì —Å—Å—ã–ª–∫–∞.
		"""

		Markup = types.InlineKeyboardMarkup()
		if text and link: Markup.add(types.InlineKeyboardButton(text, link))

		return Markup

	def __BuildMediaGroup(self, caption: str, files: dict) -> list[types.InputMedia]:
		"""
		–°—Ç—Ä–æ–∏—Ç –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è.
			caption ‚Äì –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞;
			types ‚Äì —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
		"""

		MediaGroup = list()

		for File in files:
			Caption = None if MediaGroup else caption
			if File["type"] == "photo": MediaGroup.append(types.InputMediaPhoto(media = File["file_id"], caption = Caption))
			if File["type"] == "video": MediaGroup.append(types.InputMediaVideo(media = File["file_id"], caption = Caption))
			if File["type"] == "audio": MediaGroup.append(types.InputMediaAudio(media = File["file_id"], caption = Caption))
			if File["type"] == "document": MediaGroup.append(types.InputMediaDocument(media = File["file_id"], caption = Caption))
			if File["type"] == "animation": MediaGroup.append(types.InputMediaAnimation(media = File["file_id"], caption = Caption))

		return MediaGroup

	def __Mailing(self, admin: UserData, targets: list[UserData]):
		"""
		–ú–µ—Ç–æ–¥ –≤–µ–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.
			admin ‚Äì –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä;\n
			targets ‚Äì —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π.
		"""

		Progress = 0.0
		Sended = 0
		Errors = 0
		self.__Bot.send_message(
			chat_id = admin.id,
			text = "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞.",
			reply_markup = MailingReplyKeyboards.mailing(admin)
		)
		MessageID = self.__Bot.send_message(
			chat_id = admin.id,
			text = f"<b>üì® –†–∞—Å—Å—ã–ª–∫–∞</b>\n\n‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {Progress}%\n‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {Sended}\n‚ùå –û—à–∏–±–æ–∫: {Errors}",
			parse_mode = "HTML"
		).id

		Options = OptionsStruct(admin)

		for Index in range(len(targets)):

			try:
				if not targets[Index].is_chat_forbidden and "reloc" not in targets[Index].flags:
					self.send_message(admin, targets[Index])
					targets[Index].add_flags("reloc")
					sleep(2)

				else: continue

			except: 
				Options.mailing.set_status(False)
				Errors += 1
				return
			
			else: Sended += 1

			Progress = (Sended + Errors) / len(targets) * 100
			Progress = round(Progress, 2)
			if str(Progress).endswith(".0"): Progress = int(Progress)
			print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {Progress}. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {Sended}. –û—à–∏–±–æ–∫: {Errors}.")
			# if type(Progress) == int: self.__UpdateReport(admin, MessageID, Progress, Index, len(targets), Sended, Errors)

		Options.mailing.set_status(False)

		# self.__UpdateReport(admin, MessageID, Progress, Index, len(targets), Sended, Errors)
		# self.__EndReport(admin)

	#==========================================================================================#
	# >>>>> –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#

	def __init__(self, bot: TeleBot):
		"""
		–•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤.
			bot ‚Äì –±–æ—Ç Telegram.
		"""

		#---> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤.
		#==========================================================================================#
		self.__Bot = bot
		self.__MailingThread = None

	# @Decorators.ignore_frecuency_errors
	def send_message(self, admin: UserData, user: UserData):
		"""
		–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
			admin ‚Äì –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä;\n
			user ‚Äì —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
		"""

		Options = admin.get_property("ap")
		Text = Options["mailing_caption"]
		Files = Options["mailing_content"]
		ButtonLabel = Options["button_label"]
		ButtonLink = Options["button_link"]
		SendMethods = {
			"photo": self.__Bot.send_photo,
			"video": self.__Bot.send_video,
			"audio": self.__Bot.send_audio,
			"document": self.__Bot.send_document,
			"animation": self.__Bot.send_animation
		}

		try:
			if len(Files) > 1:
				self.__Bot.send_media_group(
					chat_id = user.id,
					media = self.__BuildMediaGroup(Text, Files)
				)

			elif len(Files) == 1:
				FileType = Files[0]["type"]
				FileID = Files[0]["file_id"]
				SendMethods[FileType](
					user.id,
					FileID,
					caption = Text,
					parse_mode = "HTML",
					reply_markup = self.__BuildButton(ButtonLabel, ButtonLink)
				)
				
			else:
				self.__Bot.send_message(
					chat_id = user.id,
					text = Text,
					parse_mode = "HTML",
					disable_web_page_preview = True,
					reply_markup = self.__BuildButton(ButtonLabel, ButtonLink)
				)

		except: user.set_chat_forbidden(True)

	def start_mailing(self, admin: UserData, users_manager: UsersManager):
		"""
		–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
			admin ‚Äì –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä;\n
			users_manager ‚Äì –º–µ–Ω–µ–¥–∂–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
		"""

		Options = admin.get_property("ap")
		Sampling = Options["sampling"]
		Targets = None

		if type(Sampling) == int:
			try: Targets = random.sample(users_manager.users, Sampling)
			except ValueError: Targets = users_manager.users

		elif type(Sampling) == str:
			IsSended = False

			for User in users_manager.users:

				if User.username and User.username.lower() == Sampling.lower(): 
					try:
						self.send_message(admin, User)
						IsSended = True

					except: User.set_chat_forbidden(True)

					break

			if IsSended: self.__Bot.send_message(admin.id, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{Sampling}.")
			else: self.__Bot.send_message(admin.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{Sampling}.")

			return

		elif Sampling == None: Targets = users_manager.users

		Options["mailing"] = True
		admin.set_property("ap", Options)
		self.__MailingThread = Thread(target = self.__Mailing, args = [admin, Targets])
		self.__MailingThread.start()