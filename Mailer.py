from .ReplyKeyboards import ReplyKeyboards

from dublib.TelebotUtils import UserData, UsersManager
from dublib.Polyglot import Markdown

from telebot import TeleBot, types
from threading import Thread
from time import sleep

import random

class Mailer:
	"""–†–∞—Å—Å—ã–ª—å—â–∏–∫."""

	#==========================================================================================#
	# >>>>> –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#

	def __BuildButton(self, text: str, link: str) -> types.InlineKeyboardButton:
		"""
		–°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É.
			text ‚Äì –ø–æ–¥–ø–∏—Å—å –∫–Ω–æ–ø–∫–∏;
			link ‚Äì —Å—Å—ã–ª–∫–∞.
		"""

		Markup = types.InlineKeyboardMarkup()
		if text and link: Markup.add(types.InlineKeyboardButton(text, link))

		return Markup

	def __BuildMediaGroup(self, caption: str, files: dict) -> list[types.InputMedia]:
		"""
		–°—Ç—Ä–æ–∏—Ç –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è.
			caption ‚Äì –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞;
			types ‚Äì —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
		"""

		MediaGroup = list()

		for File in files:
			Caption = None if MediaGroup else caption
			if File["type"] == "photo": MediaGroup.append(types.InputMediaPhoto(media = File["file_id"], caption = Caption))
			if File["type"] == "video": MediaGroup.append(types.InputMediaVideo(media = File["file_id"], caption = Caption))
			if File["type"] == "audio": MediaGroup.append(types.InputMediaAudio(media = File["file_id"], caption = Caption))
			if File["type"] == "document": MediaGroup.append(types.InputMediaDocument(media = File["file_id"], caption = Caption))

		return MediaGroup

	def __Mailing(self, admin: UserData, targets: list[UserData]):
		"""
		–ú–µ—Ç–æ–¥ –≤–µ–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.
			admin ‚Äì –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä;\n
			targets ‚Äì —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π.
		"""

		Progress = 0.0
		Sended = 0
		Errors = 0
		self.__Bot.send_message(
			chat_id = admin.id,
			text = "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞.",
			reply_markup = ReplyKeyboards.mailing(admin)
		)
		MessageID = self.__Bot.send_message(
			chat_id = admin.id,
			text = f"*üì® –†–∞—Å—Å—ã–ª–∫–∞*\n\n‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {Markdown(Progress).escaped_text}%\n‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {Sended}\n‚ùå –û—à–∏–±–æ–∫: {Errors}",
			parse_mode = "MarkdownV2"
		).id

		Options = admin.get_property("ap")

		for Index in range(len(targets)):
			if Options["mailing"] == None: break

			try:
				if not targets[Index].is_chat_forbidden: self.send_message(admin, targets[Index])

			except: Errors += 1
			else: Sended += 1

			Progress = (Sended + Errors) / len(targets) * 100
			Progress = round(Progress, 2)
			if str(Progress).endswith(".0"): Progress = int(Progress)
			
			self.__Bot.edit_message_text(
				chat_id = admin.id,
				message_id = MessageID,
				text = f"*üì® –†–∞—Å—Å—ã–ª–∫–∞*\n\n‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {Markdown(Progress).escaped_text}% \\({Index + 1} –∏–∑ {len(targets)}\\)\n‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {Sended}\n‚ùå –û—à–∏–±–æ–∫: {Errors}",
				parse_mode = "MarkdownV2"
			)
			sleep(0.1)

		Options["mailing"] = False
		admin.set_property("ap", Options)

		self.__Bot.send_message(
			chat_id = admin.id,
			text = "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
			reply_markup = ReplyKeyboards.mailing(admin)
		)

	#==========================================================================================#
	# >>>>> –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#

	def __init__(self, bot: TeleBot):
		"""
		–•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤.
			bot ‚Äì –±–æ—Ç Telegram.
		"""

		#---> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤.
		#==========================================================================================#
		self.__Bot = bot
		self.__MailingThread = None

	def send_message(self, admin: UserData, user: UserData):
		"""
		–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
			admin ‚Äì –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä;\n
			user ‚Äì —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
		"""

		Options = admin.get_property("ap")
		Text = Options["mailing_caption"]
		Files = Options["mailing_content"]
		ButtonLabel = Options["button_label"]
		ButtonLink = Options["button_link"]
		SendMethods = {
			"photo": self.__Bot.send_photo,
			"video": self.__Bot.send_video,
			"audio": self.__Bot.send_audio,
			"document": self.__Bot.send_document
		}

		try:
			if len(Files) > 1:
				self.__Bot.send_media_group(
					chat_id = user.id,
					media = self.__BuildMediaGroup(Text, Files)
				)

			elif len(Files) == 1:
				FileType = Files[0]["type"]
				FileID = Files[0]["file_id"]
				SendMethods[FileType](
					user.id,
					FileID,
					caption = Text,
					parse_mode = "HTML",
					reply_markup = self.__BuildButton(ButtonLabel, ButtonLink)
				)
				
			else:
				self.__Bot.send_message(
					chat_id = user.id,
					text = Text,
					parse_mode = "HTML",
					disable_web_page_preview = True,
					reply_markup = self.__BuildButton(ButtonLabel, ButtonLink)
				)

		except: user.set_chat_forbidden(True)

	def start_mailing(self, admin: UserData, users_manager: UsersManager):
		"""
		–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
			admin ‚Äì –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä;\n
			users_manager ‚Äì –º–µ–Ω–µ–¥–∂–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
		"""

		Options = admin.get_property("ap")
		Sampling = Options["sampling"]
		Targets = None

		if type(Sampling) == int:
			try: Targets = random.sample(users_manager.users, Sampling)
			except ValueError: Targets = users_manager.users

		elif Sampling == None: Targets = users_manager.users

		Options["mailing"] = True
		admin.set_property("ap", Options)
		self.__MailingThread = Thread(target = self.__Mailing, args = [admin, Targets])
		self.__MailingThread.start()