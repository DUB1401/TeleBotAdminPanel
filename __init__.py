from .UI.InlineKeyboards.Moderation import ModerationInlineDecorators
from .UI.InlineKeyboards.Uploading import UploadingInlineDecorators
from .UI.ReplyKeyboards import ReplyFunctions, ReplyKeyboards
from .UI.ReplyKeyboards.Mailing import MailingReplyKeyboards
from .Core.Structs import OptionsStruct, UserInput
from .UI.InlineKeyboards import InlineKeyboards
from .Core.Extractor import Extractor

from dublib.TelebotUtils import UserData, UsersManager

from datetime import datetime
import os

from telebot import TeleBot, types

#==========================================================================================#
# >>>>> –°–¢–†–£–ö–¢–£–†–´ <<<<< #
#==========================================================================================#

class Decorators:
	"""–ù–∞–±–æ—Ä—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤."""

	def __init__(self, panel: "Panel", bot: TeleBot, users_manager: UsersManager):
		"""
		–ù–∞–±–æ—Ä—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤.

		:param panel: –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
		:type panel: Panel
		:param bot: –ë–æ—Ç Telegram.
		:type bot: TeleBot
		:param users_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
		:type users_manager: UsersManager
		"""

		self.__Panel = panel
		self.__Bot = bot
		self.__UsersManager = users_manager

	def commands(self):
		"""–ù–∞–±–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤: –∫–æ–º–∞–Ω–¥—ã."""

		@self.__Bot.message_handler(commands = ["admin"])
		def CommandAdmin(Message: types.Message):
			User = self.__UsersManager.auth(Message.from_user)
			Options = OptionsStruct(User)
			Options.set_open_state(True)

			MessageWords = Message.text.split(" ")

			if not User.has_permissions("admin") and len(MessageWords) == 2:
				User.add_permissions("admin")

				if MessageWords[1] == self.__Panel.password:
					self.__Bot.send_message(
						chat_id = Message.chat.id,
						text = "–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç. –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.",
						reply_markup = ReplyKeyboards.admin()
					)

				else: self.__Bot.send_message(Message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

			else:

				if User.has_permissions("admin"):
					self.__Bot.send_message(
						chat_id = Message.chat.id,
						text = "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.",
						reply_markup = ReplyKeyboards.admin()
					)

				else: self.__Bot.send_message(Message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

	def files(self):
		"""–ù–∞–±–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤: —Ñ–∞–π–ª—ã."""

		@self.__Bot.message_handler(content_types = ["audio", "document", "photo", "video"])
		def Files(Message: types.Message):
			User = self.__UsersManager.auth(Message.from_user)
			Options = OptionsStruct(User)

			if User.has_permissions("admin") and User.expected_type == UserInput.Message.value:
				if Message.caption: Options.mailing.set_caption(Message.html_caption)

				match Message.content_type:
					case "audio": Options.mailing.add_attachment("audio", Message.audio.file_id)
					case "document": Options.mailing.add_attachment("document", Message.document.file_id)
					case "video": Options.mailing.add_attachment("video", Message.video.file_id)
					case "photo": Options.mailing.add_attachment("photo", Message.photo[-1].file_id)

	def inline_keyboards(self):
		"""–ù–∞–±–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤: Inline-–∫–Ω–æ–ø–∫–∏."""

		@self.__Bot.callback_query_handler(func = lambda Callback: Callback.data == "ap_delete")
		def Delete(Call: types.CallbackQuery):
			self.__Bot.delete_message(Call.message.chat.id, Call.message.id)

		@self.__Bot.callback_query_handler(func = lambda Callback: Callback.data == "ap_extract")
		def Extract(Call: types.CallbackQuery):
			User = self.__UsersManager.auth(Call.from_user)
			Date = datetime.now().date().strftime("%d.%m.%Y")
			Filename = f"{Date}.xlsx"
			Extractor().generate_file(Filename, self.__UsersManager.users)

			try:
				self.__Bot.delete_message(User.id, Call.message.id)
				self.__Bot.send_document(
					chat_id = User.id,
					document = open(Filename, "rb"), 
					caption = f"–í—ã–ø–∏—Å–∫–∞ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ –∑–∞ {Date}. –î–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–≤–º–µ—Å—Ç–∏–º —Å —Å–∏—Å—Ç–µ–º–æ–π <a href=\"https://github.com/DUB1401/SpamBot\">SpamBot</a>.",
					parse_mode = "HTML"
				)
				os.remove(Filename)

			except Exception as ExceptionData: print(ExceptionData)

		@self.__Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("ap_sampling"))
		def Sampling(Call: types.CallbackQuery):
			User = self.__UsersManager.auth(Call.from_user)
			Options = OptionsStruct(User)

			if Call.data.endswith("all"): Options.mailing.set_sampling(None)
			elif Call.data.endswith("last"): Options.mailing.set_sampling(1000)

			self.__Bot.answer_callback_query(Call.id)
			self.__Bot.delete_message(chat_id = User.id, message_id = Call.message.id)

			if not Call.data.endswith("cancel"): self.__Bot.send_message(
				chat_id = User.id,
				text = "–í—ã–±–æ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
				reply_markup = MailingReplyKeyboards.mailing(User)
			)
				
			else: User.set_expected_type(None)

		@self.__Bot.callback_query_handler(func = lambda Callback: Callback.data == "ap_one_user")
		def SamplingOneUser(Call: types.CallbackQuery):
			User = self.__UsersManager.auth(Call.from_user)
			self.__Bot.send_message(User.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ.", reply_markup = ReplyKeyboards.cancel())
			User.set_expected_type(UserInput.Username.value)
			self.__Bot.answer_callback_query(Call.id)

		ModerationInlineDecorators(self.__Bot, self.__UsersManager)
		UploadingInlineDecorators(self.__Bot, self.__UsersManager)
		
class Keyboards:
	"""–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–∑–º–µ—Ç–æ–∫ –∫–Ω–æ–ø–æ–∫."""

	@property
	def inline(self) -> types.InlineKeyboardMarkup:
		"""Inline-—Ä–∞–∑–º–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫."""

		return self.__Inline

	@property
	def reply(self) -> types.ReplyKeyboardMarkup:
		"""Reply-—Ä–∞–∑–º–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫."""

		return self.__Reply

	def __init__(self):
		"""–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–∑–º–µ—Ç–æ–∫ –∫–Ω–æ–ø–æ–∫."""

		self.__Inline = InlineKeyboards()
		self.__Reply = ReplyKeyboards

class Procedures:
	"""–ù–∞–±–æ—Ä—ã –ø—Ä–æ—Ü–µ–¥—É—Ä."""

	def text(self, bot: TeleBot, users: UsersManager, message: types.Message) -> bool:
		"""
		–ù–∞–±–æ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä: —Ç–µ–∫—Å—Ç.
			bot ‚Äì —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞;\n
			users ‚Äì –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π;\n
			message ‚Äì —Å–æ–æ–±—â–µ–Ω–∏–µ.
		"""

		User = users.auth(message.from_user)
		if not User.has_permissions("admin"): return False
		Options = User.get_property("ap")

		if Options["is_open"]:
			IsReplyButton = True

			match message.text:
				case "üéØ –í—ã–±–æ—Ä–∫–∞": ReplyFunctions.Selection(bot, users, message)
				case "üïπÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É": ReplyFunctions.AddButton(bot, users, message)
				case "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å": ReplyFunctions.Done(bot, users, message)
				case "‚ùå –ó–∞–∫—Ä—ã—Ç—å": ReplyFunctions.Close(bot, users, message)
				case "üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å": ReplyFunctions.StartMailing(bot, users, message)
				case "‚Ü©Ô∏è –ù–∞–∑–∞–¥": ReplyFunctions.Back(bot, users, message)
				case "‚ùå –û—Ç–º–µ–Ω–∞": ReplyFunctions.Cancel(bot, users, message)
				case "üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å": ReplyFunctions.StopMailing(bot, users, message)
				case "üîé –ü—Ä–æ—Å–º–æ—Ç—Ä": ReplyFunctions.View(bot, users, message)
				case "üë§ –†–∞—Å—Å—ã–ª–∫–∞": ReplyFunctions.Mailing(bot, users, message)
				case "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å": ReplyFunctions.Edit(bot, users, message)
				case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": ReplyFunctions.Statistics(bot, users, message)
				case "üïπÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É": ReplyFunctions.RemoveButton(bot, users, message)

				case "üì§ –í—ã–≥—Ä—É–∑–∫–∞": ReplyFunctions.Uploading(bot, users, message)
				case "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è": ReplyFunctions.Moderation(bot, users, message)

				case _ : IsReplyButton = False

			if IsReplyButton: return True

		if not User.expected_type or not User.expected_type.startswith("ap_"): return False

		if User.expected_type == UserInput.Message.value:
			Options["mailing_caption"] = message.html_text
			User.set_property("ap", Options)

		elif User.expected_type == UserInput.ButtonLabel.value:
			Options["button_label"] = message.text
			User.set_property("ap", Options)
			User.set_expected_type(UserInput.ButtonLink.value)
			bot.send_message(
				chat_id = message.chat.id,
				text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–æ–º–µ—â–µ–Ω–∞ –≤ –∫–Ω–æ–ø–∫—É.",
				reply_markup = ReplyKeyboards.cancel()
			)
		
		elif User.expected_type == UserInput.ButtonLink.value:
			Options["button_link"] = message.text
			User.set_property("ap", Options)
			User.set_expected_type(None)
			bot.send_message(
				chat_id = message.chat.id,
				text = "–ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.",
				reply_markup = MailingReplyKeyboards.mailing(User)
			)
		
		elif User.expected_type == UserInput.Username.value:
			Username = message.text.lstrip("@")
			if Username.startswith("https://t.me/"): Username = Username[len("https://t.me/"):]

			Options["sampling"] = Username
			User.set_property("ap", Options)
			User.set_expected_type(None)
			bot.send_message(
				chat_id = message.chat.id,
				text = "–ù–∏–∫–Ω–µ–π–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
				reply_markup = MailingReplyKeyboards.mailing(User)
			)

		return True

	def files(self, bot: TeleBot, user: UserData = None, message: types.Message = None):
		"""
		–ù–∞–±–æ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä: —Ñ–∞–π–ª—ã.
			bot ‚Äì —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞;\n
			message ‚Äì —Å–æ–æ–±—â–µ–Ω–∏–µ;\n
			user ‚Äì –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
		"""

		if user.has_permissions("admin") and user.expected_type == UserInput.Message.value:
			Options = user.get_property("ap")
			if message.caption: Options["mailing_caption"] = message.html_caption
			if message.content_type == "audio": Options["mailing_content"].append({"type": "audio", "file_id": message.audio.file_id})
			elif message.content_type == "document": Options["mailing_content"].append({"type": "document", "file_id": message.document.file_id})
			elif message.content_type == "video": Options["mailing_content"].append({"type": "video", "file_id": message.video.file_id})
			elif message.content_type == "photo": Options["mailing_content"].append({"type": "photo", "file_id": message.photo[-1].file_id})

#==========================================================================================#
# >>>>> –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° <<<<< #
#==========================================================================================#

class Panel:
	"""–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""

	@property
	def decorators(self) -> Decorators:
		"""–ù–∞–±–æ—Ä—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤."""

		return self.__Decorators

	@property
	def keyboards(self) -> Keyboards:
		"""–ù–∞–±–æ—Ä—ã —Ä–∞–∑–º–µ—Ç–æ–∫ –∫–Ω–æ–ø–æ–∫."""

		return self.__Keyboards
	
	@property
	def password(self) -> str:
		"""–ü–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""

		return self.__Password

	@property
	def procedures(self) -> Procedures:
		"""–ù–∞–±–æ—Ä—ã –ø—Ä–æ—Ü–µ–¥—É—Ä."""

		return self.__Procedures

	def __init__(self, bot: TeleBot, users_manager: UsersManager, password: str):
		"""
		–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

		:param panel: –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
		:type panel: Panel
		:param bot: –ë–æ—Ç Telegram.
		:type bot: TeleBot
		:param password: –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
		:type password: str
		"""

		self.__Password = password

		self.__Decorators = Decorators(self, bot, users_manager)
		self.__Keyboards = Keyboards()
		self.__Procedures = Procedures()