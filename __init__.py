from .InlineKeyboards import InlineKeyboards
from .Extractor import GenerateExtractFile
from .ReplyKeyboards import ReplyKeyboards
from .Mailer import Mailer

from dublib.TelebotUtils import UserData, UsersManager

from telebot import TeleBot, types
from datetime import datetime

import enum
import os

#==========================================================================================#
# >>>>> –°–¢–†–£–ö–¢–£–†–´ <<<<< #
#==========================================================================================#

class Decorators:
	"""–ù–∞–±–æ—Ä—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤."""

	def commands(self, bot: TeleBot, users: UsersManager, password: str):
		"""
		–ù–∞–±–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤: –∫–æ–º–∞–Ω–¥—ã.
			bot ‚Äì —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞;\n
			users ‚Äì –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π;\n
			password ‚Äì –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
		"""

		@bot.message_handler(commands = ["admin"])
		def CommandAdmin(Message: types.Message):
			User = users.auth(Message.from_user)
			Options = {
				"mailing_caption": None,
				"mailing_content": [],
				"button_label": None,
				"button_link": None,
				"sampling": None,
				"mailing": False
			}
			User.set_property("ap", Options, force = False)
			MessageWords = Message.text.split(" ")

			if not User.has_permissions("admin") and len(MessageWords) == 2:
				User.add_permissions("admin")

				if MessageWords[1] == password:
					bot.send_message(
						chat_id = Message.chat.id,
						text = "–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç. –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.",
						reply_markup = ReplyKeyboards.admin()
					)

				else:
					bot.send_message(
						chat_id = Message.chat.id,
						text = "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å."
					)

			else:

				if User.has_permissions("admin"):
					bot.send_message(
						chat_id = Message.chat.id,
						text = "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.",
						reply_markup = ReplyKeyboards.admin()
					)

				else:
					bot.send_message(
						chat_id = Message.chat.id,
						text = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω."
					)

	def files(self, bot: TeleBot, users: UsersManager):
		"""
		–ù–∞–±–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤: —Ñ–∞–π–ª—ã.
			bot ‚Äì —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞;\n
			users ‚Äì –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
		"""

		@bot.message_handler(content_types = ["audio", "document", "photo", "video"])
		def Files(Message: types.Message):
			User = users.auth(Message.from_user)
			Options = User.get_property("ap")

			if User.has_permissions("admin") and User.expected_type == UserInput.Message.value:
				
				if Message.caption:
					Options["mailing_caption"] = Message.html_caption
					User.set_property("ap", Options)

				if Message.content_type == "audio": Options["mailing_content"].append({"type": "audio", "file_id": Message.audio.file_id})
				elif Message.content_type == "document": Options["mailing_content"].append({"type": "document", "file_id": Message.document.file_id})
				elif Message.content_type == "video": Options["mailing_content"].append({"type": "video", "file_id": Message.video.file_id})
				elif Message.content_type == "photo": Options["mailing_content"].append({"type": "photo", "file_id": Message.photo[-1].file_id})

	def inline_keyboards(self, bot: TeleBot = None, users: UsersManager = None):
		"""
		–ù–∞–±–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤: Inline-–∫–Ω–æ–ø–∫–∏.
			bot ‚Äì —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞;\n
			users ‚Äì –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
		"""

		@bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("ap_sampling"))
		def InlineButton(Call: types.CallbackQuery):
			User = users.auth(Call.from_user)
			Options = User.get_property("ap")
			if Call.data.endswith("all"): Options["sampling"] = None
			if Call.data.endswith("last"): Options["sampling"] = 1000
			User.set_property("ap", Options)

			bot.answer_callback_query(Call.id)
			bot.delete_message(chat_id = User.id, message_id = Call.message.id)

			if not Call.data.endswith("cancel"): bot.send_message(
				chat_id = User.id,
				text = "–í—ã–±–æ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
				reply_markup = ReplyKeyboards.mailing(User)
			)
				
			else: User.set_expected_type(None)

		@bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("ap_extract"))
		def InlineButton(Call: types.CallbackQuery):
			User = users.auth(Call.from_user)
			Date = datetime.now().date().strftime("%d.%m.%Y")
			Filename = f"{Date}.xlsx"
			GenerateExtractFile(Filename, users.users)

			try:
				bot.delete_message(User.id, Call.message.id)
				bot.send_document(
					chat_id = User.id,
					document = open(Filename, "rb"), 
					caption = f"–í—ã–ø–∏—Å–∫–∞ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ –∑–∞ {Date}. –î–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–≤–º–µ—Å—Ç–∏–º —Å —Å–∏—Å—Ç–µ–º–æ–π <a href=\"https://github.com/DUB1401/SpamBot\">SpamBot</a>.",
					parse_mode = "HTML"
				)
				os.remove(Filename)

			except Exception as ExceptionData: print(ExceptionData)

		@bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("ap_one_user"))
		def InlineButton(Call: types.CallbackQuery):
			User = users.auth(Call.from_user)
			bot.send_message(User.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ.", reply_markup = ReplyKeyboards.cancel())
			User.set_expected_type(UserInput.Username.value)
			bot.answer_callback_query(Call.id)

	def photo(self, bot: TeleBot, users: UsersManager):
		"""
		–ù–∞–±–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤: —Ñ–æ—Ç–æ.
			bot ‚Äì —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞;\n
			users ‚Äì –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
		"""

		@bot.message_handler(content_types = ["photo"])
		def Photo(Message: types.Message):
			User = users.auth(Message.from_user)
			Options = User.get_property("ap")

			if User.has_permissions("admin") and User.expected_type == "message":
				if Message.caption: Options["mailing_caption"] = Message.html_caption
				Options["mailing_content"].append({"type": "photo", "file_id": Message.photo[-1].file_id})
				User.set_property("ap", Options)

	def reply_keyboards(self, bot: TeleBot, users: UsersManager):
		"""
		–ù–∞–±–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤: Reply-–∫–Ω–æ–ø–∫–∏.
			bot ‚Äì —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞;\n
			users ‚Äì –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
		"""

		@bot.message_handler(content_types = ["text"], regexp = "üéØ –í—ã–±–æ—Ä–∫–∞")
		def Button(Message: types.Message):
			User = users.auth(Message.from_user)
			User.set_expected_type(UserInput.Sampling.value)
			Options = User.get_property("ap")
			Sampling = Options["sampling"]

			if type(Sampling) == int: Sampling = f"<i>{Sampling} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>"
			elif type(Sampling) == str: Sampling = f"@{Sampling}"
			elif Sampling == None: Sampling = "üö´"

			bot.send_message(
				chat_id = Message.chat.id,
				text = f"<b>–£–∫–∞–∂–∏—Ç–µ –≤—ã–±–æ—Ä–∫—É</b>\n\n–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users.users)}\n–¢–µ–∫—É—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {Sampling}",
				parse_mode = "HTML",
				reply_markup = InlineKeyboards.sampling(User)
			)

		@bot.message_handler(content_types = ["text"], regexp = "üïπÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É")
		def Button(Message: types.Message):
			User = users.auth(Message.from_user)
			User.set_expected_type(UserInput.ButtonLabel.value)
			bot.send_message(
				chat_id = Message.chat.id,
				text = "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∫–Ω–æ–ø–∫–∏.",
				reply_markup = ReplyKeyboards.cancel()
			)

		@bot.message_handler(content_types = ["text"], regexp = "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å")
		def Button(Message: types.Message):
			User = users.auth(Message.from_user)
			User.set_expected_type(None)
			bot.send_message(
				chat_id = Message.chat.id,
				text = "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.",
				reply_markup = ReplyKeyboards.mailing(User)
			)

		@bot.message_handler(content_types = ["text"], regexp = "‚ùå –ó–∞–∫—Ä—ã—Ç—å")
		def Button(Message: types.Message):
			User = users.auth(Message.from_user)
			bot.send_message(
				chat_id = Message.chat.id,
				text = "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∞.",
				reply_markup = types.ReplyKeyboardRemove()
			)

		@bot.message_handler(content_types = ["text"], regexp = "üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å")
		def Button(Message: types.Message):
			User = users.auth(Message.from_user)
			User.set_object("mailer", Mailer(bot))
			Options = User.get_property("ap")

			if not Options["mailing_caption"] and not Options["mailing_content"]:
				bot.send_message(
					chat_id = Message.chat.id,
					text = "–í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."
				)

			else: User.get_object("mailer").start_mailing(User, users)

		@bot.message_handler(content_types = ["text"], regexp = "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
		def Button(Message: types.Message):
			User = users.auth(Message.from_user)
			bot.send_message(
				chat_id = Message.chat.id,
				text = "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
				reply_markup = ReplyKeyboards.admin()
			)

		@bot.message_handler(content_types = ["text"], regexp = "‚ùå –û—Ç–º–µ–Ω–∞")
		def Button(Message: types.Message):
			User = users.auth(Message.from_user)
			
			if User.expected_type == UserInput.Message.value:
				Options = User.get_property("ap")
				User.set_expected_type(UserInput.Message.value)
				Caption = Options["temp_mailing_caption"]
				Content = Options["temp_mailing_content"]
				Options["mailing_caption"] = Caption
				Options["mailing_content"] = Content
				del Options["temp_mailing_caption"]
				del Options["temp_mailing_content"]
				User.set_property("ap", Options)

			User.set_expected_type(None)
			bot.send_message(
				chat_id = Message.chat.id,
				text = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
				reply_markup = ReplyKeyboards.mailing(User)
			)

		@bot.message_handler(content_types = ["text"], regexp = "üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
		def Button(Message: types.Message):
			User = users.auth(Message.from_user)
			Options = User.get_property("ap")
			Options["mailing"] = None
			User.set_property("ap", Options)

		@bot.message_handler(content_types = ["text"], regexp = "üîé –ü—Ä–æ—Å–º–æ—Ç—Ä")
		def Button(Message: types.Message):
			User = users.auth(Message.from_user)
			Options = User.get_property("ap")

			if not Options["mailing_caption"] and not Options["mailing_content"]:
				bot.send_message(
					chat_id = Message.chat.id,
					text = "–í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."
				)

			else: Mailer(bot).send_message(User, User)

		@bot.message_handler(content_types = ["text"], regexp = "üë§ –†–∞—Å—Å—ã–ª–∫–∞")
		def Button(Message: types.Message):
			User = users.auth(Message.from_user)
			bot.send_message(
				chat_id = Message.chat.id,
				text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π.",
				reply_markup = ReplyKeyboards.mailing(User)
			)

		@bot.message_handler(content_types = ["text"], regexp = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
		def Button(Message: types.Message):
			User = users.auth(Message.from_user)
			Options = User.get_property("ap")
			User.set_expected_type(UserInput.Message.value)
			Caption = Options["mailing_caption"]
			Content = Options["mailing_content"]
			Options["temp_mailing_caption"] = Caption
			Options["temp_mailing_content"] = Content
			Options["mailing_caption"] = None
			Options["mailing_content"] = list()
			User.set_property("ap", Options)
			bot.send_message(
				chat_id = Message.chat.id,
				text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞—Å—Å—ã–ª–∫–µ.\n\n–ï—Å–ª–∏ –≤—ã –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–ª–æ–∂–µ–Ω–∏–π, –¥–ª—è –∏—Ö —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.",
				reply_markup = ReplyKeyboards.editing()
			)

		@bot.message_handler(content_types = ["text"], regexp = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
		def Button(Message: types.Message):
			User = users.auth(Message.from_user)

			UsersCount = len(users.users)
			BlockedUsersCount = 0

			for user in users.users:
				if user.is_chat_forbidden: BlockedUsersCount += 1

			Counts = [len(users.premium_users), len(users.get_active_users()), BlockedUsersCount]
			Percentages = [None, None, None]

			for Index in range(len(Counts)):
				Percentages[Index] = round(Counts[Index] / UsersCount * 100, 1)
				if str(Percentages[Index]).endswith(".0"): Percentages[Index] = int(Percentages[Index])

			Text = (
				"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n",
				f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{UsersCount}</b>",
				f"‚≠ê –ò–∑ –Ω–∏—Ö Premium: <b>{Counts[0]}</b> (<i>{Percentages[0]}%</i>)",
				f"üß© –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: <b>{Counts[1]}</b> (<i>{Percentages[1]}%</i>)",
				f"‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: <b>{Counts[2]}</b> (<i>{Percentages[2]}%</i>)"
			)

			bot.send_message(
				chat_id = Message.chat.id,
				text = "\n".join(Text),
				parse_mode = "HTML",
				reply_markup = InlineKeyboards.extract() 
			)

		@bot.message_handler(content_types = ["text"], regexp = "üïπÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É")
		def Button(Message: types.Message):
			User = users.auth(Message.from_user)
			Options = User.get_property("ap")
			Options["button_label"] = None
			Options["button_link"] = None
			User.set_property("ap", Options)
			bot.send_message(
				chat_id = Message.chat.id,
				text = "–ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞.",
				reply_markup = ReplyKeyboards.mailing(User)
			)

class Keyboards:
	"""–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–∑–º–µ—Ç–æ–∫ –∫–Ω–æ–ø–æ–∫."""

	@property
	def inline(self) -> types.InlineKeyboardMarkup:
		"""Inline-—Ä–∞–∑–º–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫."""

		return self.__Inline

	@property
	def reply(self) -> types.ReplyKeyboardMarkup:
		"""Reply-—Ä–∞–∑–º–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫."""

		return self.__Reply

	def __init__(self):
		"""–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–∑–º–µ—Ç–æ–∫ –∫–Ω–æ–ø–æ–∫."""

		#---> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤.
		#==========================================================================================#
		self.__Inline = InlineKeyboards()
		self.__Reply = ReplyKeyboards

class Procedures:
	"""–ù–∞–±–æ—Ä—ã –ø—Ä–æ—Ü–µ–¥—É—Ä."""

	def text(self, bot: TeleBot, user: UserData, message: types.Message) -> bool:
		"""
		–ù–∞–±–æ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä: —Ç–µ–∫—Å—Ç.
			bot ‚Äì —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞;\n
			user ‚Äì –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å;\n
			message ‚Äì —Å–æ–æ–±—â–µ–Ω–∏–µ.
		"""

		if not user.expected_type: return False
		elif not user.expected_type.startswith("ap_"): return False
		elif not user.has_permissions("admin"): return False

		Options = user.get_property("ap")

		if user.expected_type == UserInput.Message.value:
			Options["mailing_caption"] = message.html_text
			user.set_property("ap", Options)

		elif user.expected_type == UserInput.ButtonLabel.value:
			Options["button_label"] = message.text
			user.set_property("ap", Options)
			user.set_expected_type(UserInput.ButtonLink.value)
			bot.send_message(
				chat_id = message.chat.id,
				text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–æ–º–µ—â–µ–Ω–∞ –≤ –∫–Ω–æ–ø–∫—É.",
				reply_markup = ReplyKeyboards.cancel()
			)
		
		elif user.expected_type == UserInput.ButtonLink.value:
			Options["button_link"] = message.text
			user.set_property("ap", Options)
			user.set_expected_type(None)
			bot.send_message(
				chat_id = message.chat.id,
				text = "–ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.",
				reply_markup = ReplyKeyboards.mailing(user)
			)
		
		elif user.expected_type == UserInput.Username.value:
			Username = message.text.lstrip("@")
			if Username.startswith("https://t.me/"): Username = Username[len("https://t.me/"):]

			Options["sampling"] = Username
			user.set_property("ap", Options)
			user.set_expected_type(None)
			bot.send_message(
				chat_id = message.chat.id,
				text = "–ù–∏–∫–Ω–µ–π–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
				reply_markup = ReplyKeyboards.mailing(user)
			)

		return True

	def files(self, bot: TeleBot, user: UserData = None, message: types.Message = None):
		"""
		–ù–∞–±–æ—Ä –ø—Ä–æ—Ü–µ–¥—É—Ä: —Ñ–∞–π–ª—ã.
			bot ‚Äì —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞;\n
			message ‚Äì —Å–æ–æ–±—â–µ–Ω–∏–µ;\n
			user ‚Äì –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
		"""

		if user.has_permissions("admin") and user.expected_type == UserInput.Message.value:
			Options = user.get_property("ap")
			if message.caption: Options["mailing_caption"] = message.html_caption
			if message.content_type == "audio": Options["mailing_content"].append({"type": "audio", "file_id": message.audio.file_id})
			elif message.content_type == "document": Options["mailing_content"].append({"type": "document", "file_id": message.document.file_id})
			elif message.content_type == "video": Options["mailing_content"].append({"type": "video", "file_id": message.video.file_id})
			elif message.content_type == "photo": Options["mailing_content"].append({"type": "photo", "file_id": message.photo[-1].file_id})

class UserInput(enum.Enum):
	ButtonLabel = "ap_button_label"
	ButtonLink = "ap_button_link"
	Message = "ap_message"
	Sampling = "ap_sampling"
	Username = "ap_username"
	
#==========================================================================================#
# >>>>> –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° <<<<< #
#==========================================================================================#

class Panel:
	"""–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""

	@property
	def decorators(self) -> Decorators:
		"""–ù–∞–±–æ—Ä—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤."""

		return self.__Decorators

	@property
	def keyboards(self) -> Keyboards:
		"""–ù–∞–±–æ—Ä—ã —Ä–∞–∑–º–µ—Ç–æ–∫ –∫–Ω–æ–ø–æ–∫."""

		return self.__Keyboards
	
	@property
	def procedures(self) -> Procedures:
		"""–ù–∞–±–æ—Ä—ã –ø—Ä–æ—Ü–µ–¥—É—Ä."""

		return self.__Procedures

	def __init__(self):
		"""–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""

		#---> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤.
		#==========================================================================================#
		self.__Decorators = Decorators()
		self.__Keyboards = Keyboards()
		self.__Procedures = Procedures()